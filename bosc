def BOSC_tf(eegsignal, F, Fsample, wavenumber):
    if (type(F) == np.ndarray):  # need to do this bc len(int) does not return one in python, but does in matlab
        Flen = len(F)
    else:
        Flen = 1
    st = 1 / (2 * np.pi * (F / wavenumber))
    A = 1 / np.sqrt(st * np.sqrt(np.pi))
    B = np.zeros([Flen, len(eegsignal)])  # initialize time frequency matrix
    if (Flen == 1):
        t = np.arange(-3.6 * st, 3.6 * st, (1 / Fsample))
        m = A * np.exp(-np.square(t) / (2 * np.square(st))) * np.exp(1j * 2 * np.pi * F * t)
        y = np.convolve(eegsignal, m)
        y = np.square(np.abs(y))
        B = y[int(np.ceil(len(m) / 2) - 1):int((len(y) - np.floor(len(m) / 2)))]
    else:
        for f in range(Flen):  # loop through sampled frequencies
            t = np.arange(-3.6 * st[f], 3.6 * st[f], (1 / Fsample))
            m = A[f] * np.exp(-np.square(t) / (2 * np.square(st[f]))) * np.exp(1j * 2 * np.pi * F[f] * t)
            y = np.convolve(eegsignal, m)
            y = np.square(np.abs(y))
            B[f, :] = y[int(np.ceil(len(m) / 2) - 1):int((len(y) - np.floor(len(m) / 2)))]
    T = np.arange(1, eegsignal.shape[0] + 1) / Fsample
    return B, T
# Fit a line to the power spectrum in log-log units
# Used in order to estimate the background power spectrum
# Returns:
# pv - has slope and Y intercept of said line
# meanpower - mean power values for each frequency

def BOSC_bgfit(F, B):
    pv = np.polyfit(np.log10(F), np.mean(np.log10(B), 1).T, 1)
    meanpower = np.power(10, (np.polyval(pv, np.log10(F))))
    return pv, meanpower
# Calculate the duration and powerthresholds used for oscillation detection
# Returns:
# powerthresh = power threshold
# durthresh - duration threshold

def BOSC_thresholds(Fsample, percentilethresh, numcyclesthresh, F, meanpower):
    # based on a chi-square distribution with df=2 and previously determined mean
    powthresh = chi2.ppf(percentilethresh, df=2) * meanpower / 2
    # scales with frequency
    durthresh = (numcyclesthresh * Fsample / F)
    return powthresh, durthresh
# detects oscillations based on power and duration threshold
# Returns:
# detected - array indicating whether an oscillation was detected (1) or not (0)

def BOSC_detect(b, powthresh, durthresh):
    nT = len(b)  # number of time points
    x = b > powthresh  # Step 1: power threshold
    x = 1 * x
    dx = np.zeros(nT - 1)
    for i in range(len(dx)):
        dx[i] = x[i + 1] - x[i]
    pos = np.where(dx == 1)  # was +1
    pos = pos[0] + 1  # Because it's a tuple...
    neg = np.where(dx == -1)  # Shows the +1 and -1 edges
    neg = neg[0] + 1
    # Now do the special cases to handle the edges
    detected = np.zeros(len(b))
    if np.logical_and(len(pos) == 0, len(neg) == 0):
        # print(1)
        if (np.where(x)[0].all() >= 0):  # all episodes or none CHANGED TO >=
            H = np.concatenate((np.array([0]), np.array([nT])))
            H = np.asarray(H)
        else:
            H = []
            H = np.asarray(H)
    elif (len(pos) == 0):  # ie, starts on episode and then stops
        H = np.concatenate((np.array([0]), neg))
        H = np.asarray(H)
    elif (len(neg) == 0):  # starts, and ends on episode
        H = np.concatenate((pos, np.array([nT])))
        H = np.asarray(H)
    else:
        if (pos[0] > neg[0]):  # starts w/ an episode
            pos = np.concatenate((np.array([0]), pos))
        if (neg[-1] < pos[-1]):  # end with an episode
            neg = np.concatenate((neg, np.array([nT])))
        H = np.vstack((pos, neg))  # NOTE: by this time, length(pos)==length(neg), necessarily
        H = np.asarray(H)
    if (len(H.shape) == 1):
        if (len(H) != 0):
            goodep = np.where((H[1] - H[0]) >= durthresh)[
                0]  # more than one "hole" - find epochs lasting longer than minNcycles*period
            if (len(goodep) == 0):
                H = []
            else:
                H = H[:]
            if (len(H) != 0):  # I HAD TO PUT THIS IN TO FIX THE CODE!!!
                detected[int(H[0]):int(H[1])] = 1
    else:
        if (len(H) != 0):
            goodep = np.where((H[1, :] - H[0, :]) >= durthresh)[
                0]  # more than one "hole" - find epochs lasting longer than minNcycles*period
            if (len(goodep) == 0):
                H = []
            else:
                H = H[:, goodep]
            if (len(H) != 0):
                for h in range(H.shape[1]):
                    detected[H[0, h]:H[1, h]] = 1
    return detected
